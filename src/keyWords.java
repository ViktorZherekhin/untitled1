import java.text.MessageFormat;

public class keyWords {
    public static void main(String[] args) {
        Human human1 = new Human();             // создали объект класса "Human" (а сам класс задан ниже)
        human1.setAge(18);
        human1.setName("Viktor");
        human1.getInfo();
        Human human2 = new Human("Bob", 84);   // это получилось благодаря созданию своего конструктора
        human2.getInfo();
        Human human3 = new Human();  // здесь не задали параметры, поэтому они подставятся теми, что по-умолчанию
        human3.getInfo();
    }
}
        // ключевое слово "This"

class Human {
    String name;       // эти переменные называются переменными объекта,
    int age;        // т.к. у каждого объекта они разные (вообще говоря)



    // пропишем Конструктор (который создается и выполняется по умолчанию, при создании объекта класса)
    // но, если мы его не пропишем здесь, а создадим только свой конструктор (с параметрами)
    // то мы уже не сможем создать объект класса без параметров (будет ошибка)

    public Human(){                                                                     //
        System.out.println("Привет из 1-го конструктора");                              //
        this.name = "Alf";   // это значение по-умолчанию                               //
        this.age = 10;                                                                  //
    }                                                                                   // все это
                                                                                        // называется
    // создадим свой Конструктор, который будет принимать на входе имя и возраст        // "перегрузка
    public Human(String name, int age){                                                 // методов"
        this.name = name;                                                               //
        this.age = age;                                                                 //
    }

    // В одном классе мы можем иметь несколько методов с одинаковым названием
    // Главное, чтобы у них были разные параметры (по количеству  ?)
    // Java сама определяет какой метод вызывать
    // (в зависимости от того, какие мы передаем параметры)
    // Для "human1" поэтому вызвался 1-й конструктор, а для "human2" - 2-й.

    // создадим Сеттеры и Геттеры
             // public void setName(String myName){    - так задавали раньше.
             //     name = myName;                      Но нагляднее использовать такое же имя параметра
             //  }                                      как и у объекта (класса). Это best practices.
             //                                          Для этого надо использовать ключевое слово "This":
             //                                         Оно вызывает объект этого класса (для которого вызвали метод0
            //                                                      "SetName", к примеру)
    public void setName(String name){  // это методы объекта
        this.name = name;               // т.к. назначить имя
    }                                   // мы можем только конкретному объекту
    public void setAge(int age){
        this.age = age;
    }
    public String getName(){
        return name;
    }
    public int getAge(){
        return age;
    }
    public void getInfo(){
        //System.out.println(name + ", " + age + "__" + name);
        System.out.println(MessageFormat.format("Имя: {0}, возраст: {1}",
                name,
                age));
    }

}


    // КОНСТРУКТОРЫ - это специальные методы, которые вызываются при создании нового объекта,
    // т.е. он инициализирует его поля (по умолчанию его не видно, и он пустой)
    // У нас человек (human1) не может быть создан без имени возраста
    // От этого объекта иначе нет смысла, если у него не инициализированы имя и возраст.
    // Конструктор решает эту проблему (т.е. если даже пользователь не задаст явно имя и возраст,
    // Конструктор сделает это сам (подставив значения по-умолчанию).

    // Конструктор отличается тем, что у него нет типа возвращаемого значения
    // И имя конструктора всегда должно совпадать с именем класса (т.е. так же с заглавной буквы)





