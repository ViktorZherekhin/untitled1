package Strings;

public class StringBuilder {

    /*
    Изучим подробнее строки
    и класс Strings.StringBuilder */

        // В Java есть 2 типа объектов - mutable (изменяемый) и inmutable (неизменяемый)
        // Мы раньше создавали объекты классов. Они - изменяемые, т.е.
        // мы могли проинициализировать поля одними значениями,
        // а потом, в ходе выполнения программы, изменить их другими (например, методами setName, setAge).
        // Строки же является неизменяемыми
        // Т.е. все методы класса "String" оперируют не строкой, на которой они вызываются,
        // а возвращают новую строку, которая является результатом выполнения к.-л. метода (например, toUpperCase()
        // поэтому результаты выполнения методов над Inmutable-объектами надо помещять в новую переменную;

        public static void main(String[] args) {
            String s1 = "ROM123";                       // "s5" - это объект класса "String"
            String s2 = new String("qwerty");   // здесь, по сути, задали через Конструктор
            String s3 = "76";
            s2.toUpperCase();           // здесь "s2" останется той же, т.к. "s2" - неизменяемого типа данных
            System.out.println(s2);     // выведет исходную строку
            s2 = s2.toUpperCase();      // здесь мы переменную "s2" сослали на новую строку, которую возвратил метод
            System.out.println(s2);     // теперь все буквы станут заглавными
            // и на объект "qwerty" никакая переменная не ссылается
            // и он удалится из оперативной памяти посредством "Сборщика мусора"

            String strAll = s1 + s2 + s3;   // здесь происходит создание дополнительной строки: (s1+s2)
            // это еще допустимо, но если мы делаем подобное в цикле и
            // производится много операций конкатенации, то это сильно
            // снижает производительность
            System.out.println(strAll);

            // Поэтому придумали класс "String Builder"
            // Его отличие от "String" - объекты являются изменяемыми (mutable)
            // Его удобство в том, что можно не создавая новых объектов, конкатенировать к нему сколько угодно строк

            System.out.println("--------------------");

            // это глюк IDE: префикс "java.lang" вначале не добавлял
            java.lang.StringBuilder sb = new java.lang.StringBuilder("Hello");
            System.out.println(sb.toString());                          // в отличие от класса "String"
            sb.append(" my ");                  // этот метод возвращает тот же самый объект, на котором он вызывается
            sb.append("dear");                // поэтому можно применить более сокращенную запись (т.н. Method chaining):
            sb.append(" ladies").append(" and ").append("gentlemen!");
            System.out.println(sb.toString());
        }
    }


