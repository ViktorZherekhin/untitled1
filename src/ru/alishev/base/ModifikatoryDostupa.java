package ru.alishev.base;

import ru.alishev.base.Forest.Belka;

public class ModifikatoryDostupa extends Belka {

    public ModifikatoryDostupa(){       // создали Конструктор
        b2 = "Tomcat2";                 // у нас есть доступ к переменной "b2" родительского класса "Belka"
        System.out.println(b2);         // благодаря модификатору "protected" в нем
    }

    public static void main(String[] args) {
        ModifikatoryDostupa md1 = new ModifikatoryDostupa();


        /**
         * Всего существуют 4 модификатора доступа:
         * - public (разрешает доступ к классу, методу или полю везде, на протяжении одного проекта, т.е. из любого
         *          класса и любого пакета),
         * - private (разрешает доступ к полю или методу только в пределах класса, где это поле
         *          декларировано (т.е. это переменная или метод для каких-то внутренних нужд, и который
         *          не должен быть виден остальным классам),
         * - default (задается автоматически, если при задании переменной (метода или класса) ничего не указываем:
         *          "int id;". Его еще называют "Package level" модификатор, т.е. все, что "default" - оно
         *          доступно в пределах этого пакета
         * - protected (такие поле или метод доступны в пределах одного пакета (как и default), но они также
         *              доступны всем подклассам, даже если они декларированы вне пакета. Т.е. класс, в котором
         *              мы хотим получить доступ к этому полю, должен наследоваться от класса,
         *              в котором это поле декларировано
         */

        // Класс может быть либо "public", либо "default"
        // В одном Java-файле должен быть один публичный класс, имя которого должно совпадать с именем файла
        // но не более одного (хоть и с разными именами)

    }
}

